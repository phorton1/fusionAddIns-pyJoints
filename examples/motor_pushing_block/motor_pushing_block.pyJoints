# example motor_pushing_block.pyJoints
#
# Anything upto the "step:" token is executed when the
# command window is created.  In our case we are creating
# two inputs to be used in the step calculations.
#
# Note that comments and blank lines are removed from this file
# before execution, but nothing is not precompiled at this time.
#
# Note that to use the convience method addInput, we must pass in
# the locally defined 'inputs' variable. addInput() currently only
# supports int and float sliders, and if not 'int' you must pass
# in a valid Fusion units type.

addInput(inputs, 'degreesPerStep', 'deg', 0.1, 45, 6)

# The idea of this example is that we have a wheel driving
# a piston (block1), and that 10 mm away we have a block
# that will get hit by it and move and then return to its
# 'rest' position. Although this can be done, and works well
# enough with contact sets and the 'Animate Joint Relationships'
# command in Fusion, this example shows that it can be done
# with pyJoints without using contact sets, and giving a little
# more flexibility with controlling the animation.

addInput(inputs, 'restPosition', 'mm', -10, 10, 0)

# Anything after step: is python code that is executed once
# per animation frame.  The position of all joints must be
# calculated, statelessly, based soley on the value of
# the global 'step' variable.
#
# We can access any joint or input value in the model via the
# joints_by_name and inputs_by_name.value dictionaries, but
# here we use the provided convenience methods ...

step:

# Be a motor. Set the position of the wheel as a multiple
# of the step and the degreesPerStep.  Fusion likes 180
# degree biased angles


per_step = getValueByName('degreesPerStep')
setJointRotation('wheel', step * per_step)

# Let fusion move the arm and slider, and then get
# the block1 slider position and convert to mm's

pos = getJointByName('block1').jointMotion.slideValue * 10

# At a rest position of 0, block1 will hit when it
# has moved 10mm, so we subtract 10mm from the position
# of block1 to normalize it to the second block

pos -= 10

# Get the rest position of the second block.

rest = getValueByName('restPosition') 	# in mm's

# we will, by default, move block2, unles the position
# is less than the rest position

if pos < rest: pos = rest

# and finally, we convert back to cm and move block2

getJointByName('block2').jointMotion.slideValue = pos / 10

# end of motor_pushing_block.pyJoints
